#!/usr/bin/python

import sys, os, traceback, optparse
import operator
import time
import re
import random

# Color map
colors = {
    'blue'  : '[34',
    'green' : '[32',
    'cyan'  : '[36',
    'red'   : '[31',
    'purple': '[35',
    'brown' : '[33',
    'yellow': '[1;33',
    'white' : '[1;37'
}

# Control characters (end color)
control = {
    'end'  : '['
}

# Weights map
weights = {
    'black' : 1.00,
    'blue'  : 1.00,
    'green' : 1.00,
    'cyan'  : 1.00,
    'red'   : 1.00,
    'purple': 1.00,
    'brown' : 1.00,
    'gray'  : 1.00,
    'yellow': 1.00,
    'white' : 1.00
}

def ChooseColor(options):
    if options.random:
        color = random.choice(colors.keys())

    elif options.color:
        color =  options.color

    elif options.color_list:
        color_list = options.color_list.split(',')
        color = random.choice(color_list)

    elif options.except_list:
        except_list = options.except_list.split(',')
        color = random.choice(list(set(colors.keys()) - set(except_list)))

    if options.verbose:
        print 'Color chosen: ' + color

    return color

def main ():
    global options, args

    if options.verbose:
        print 'Options:'
        if options.random:
            print 'Random'
        elif options.color:
            print 'Color: ' + options.color
        elif options.color_list:
            print 'Color List: ' + options.color_list
        elif options.except_list:
            print 'Except List: ' + options.except_list

        print '\n'

    # Get the filename to colorize
    print 'Colorizing \"' + options.filename + '\"'

    # Allow for customization (list of colors to use, not use)
    # Allow for weighting of colors
    #
    # Pick random color from map with weighting for each character
    # End with 'stop'
    outfile = open(options.filename + '.color', 'w+')

    with open(options.filename) as f:
        for line in f:
            for c in line:
                #if c.isalnum() or ord(c) > 127: <--- doesn't work... outputs '???'s
                if c.isalnum():
                    color = ChooseColor(options)

                    if color in colors.keys():
                        cc = '\033' + colors[color] + 'm' + c
                        outfile.write(cc)
                else:
                    outfile.write(c)

    outfile.write('\033' + control['end'] + 'm')

if __name__ == '__main__':
    try:
        start_time = time.time()
        parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), usage=globals()['__doc__'], version='$Id$')

        parser.add_option ('-v', '--verbose', action='store_true', default=False, help='verbose output')

        parser.add_option ('-f', '--file', action='store', type='string', dest='filename', help='input file (output file will have same name with .color extension)')

        parser.add_option ('-r', '--random', action='store_true', default=False, help='random colors')

        parser.add_option ('-c', '--color', action='store', type='string', dest='color', help='specify a single color (red, green, blue, cyan, purple, brown, yellow, white)')

        parser.add_option ('-l', '--list', action='store', type='string', dest='color_list', help='specfiy a list of colors to randomly pick from')

        parser.add_option ('-e', '--except', action='store', type='string', dest='except_list', help='specify a list of colors to NOT pick')

        (options, args) = parser.parse_args()

        if not options.filename:
            parser.error ('missing argument: -f <filename>')

        if options.verbose: print time.asctime()
        main()
        if options.verbose: print time.asctime()
        if options.verbose: print 'TOTAL TIME IN MINUTES:',
        if options.verbose: print (time.time() - start_time) / 60.0
        sys.exit(0)
    except KeyboardInterrupt, e: # Ctrl-C
        raise e
    except SystemExit, e: # sys.exit()
        raise e
    except Exception, e:
        print 'ERROR, UNEXPECTED EXCEPTION'
        print str(e)
        traceback.print_exc()
        os._exit(1)
